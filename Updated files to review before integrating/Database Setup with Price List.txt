import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let db;

async function initDatabase() {
  db = await open({
    filename: path.join(__dirname, 'invoice.db'),
    driver: sqlite3.Database
  });

  // Create all tables, including the new pricing and estimate tables
  await db.exec(`
    -- Clients table
    CREATE TABLE IF NOT EXISTS clients (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      email TEXT,
      phone TEXT,
      address TEXT,
      city TEXT,
      state TEXT,
      zip TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Services table (kept for legacy/simpler items)
    CREATE TABLE IF NOT EXISTS services (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      category TEXT NOT NULL,
      description TEXT NOT NULL,
      base_price REAL DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Invoices table
    CREATE TABLE IF NOT EXISTS invoices (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      invoice_number TEXT UNIQUE NOT NULL,
      client_id INTEGER,
      client_name TEXT,
      client_address TEXT,
      client_email TEXT,
      date_of_issue DATE DEFAULT CURRENT_DATE,
      due_date DATE,
      subtotal REAL DEFAULT 0,
      tax REAL DEFAULT 0,
      total REAL DEFAULT 0,
      status TEXT DEFAULT 'draft',
      notes TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Line Items table
    CREATE TABLE IF NOT EXISTS line_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      invoice_id INTEGER,
      description TEXT NOT NULL,
      quantity REAL DEFAULT 0,
      unit_of_measure TEXT,
      unit_price REAL DEFAULT 0,
      total_price REAL DEFAULT 0,
      is_taxable BOOLEAN DEFAULT TRUE,
      FOREIGN KEY (invoice_id) REFERENCES invoices(id)
    );

    -- Settings table
    CREATE TABLE IF NOT EXISTS settings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      company_name TEXT,
      company_address TEXT,
      company_phone TEXT,
      company_email TEXT,
      company_logo TEXT,
      tax_rate REAL DEFAULT 0,
      payment_terms TEXT,
      invoice_prefix TEXT DEFAULT 'INV-',
      estimate_prefix TEXT DEFAULT 'EST-'
    );

    -- =============================================
    -- XACTIMATE-STYLE PRICING DATABASE TABLES (NEW)
    -- =============================================

    -- Main Price List Table
    CREATE TABLE IF NOT EXISTS price_list (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      line_code TEXT UNIQUE NOT NULL,
      description TEXT NOT NULL,
      category TEXT NOT NULL,
      subcategory TEXT,
      unit_of_measure TEXT NOT NULL,
      labor_cost REAL DEFAULT 0,
      material_cost REAL DEFAULT 0,
      equipment_cost REAL DEFAULT 0,
      unit_price REAL NOT NULL, -- The calculated or manually set price
      notes TEXT,
      active BOOLEAN DEFAULT TRUE,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- Price History Table
    CREATE TABLE IF NOT EXISTS price_history (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      line_code TEXT NOT NULL,
      old_price REAL,
      new_price REAL,
      changed_by TEXT,
      change_reason TEXT,
      changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (line_code) REFERENCES price_list(line_code)
    );

    -- Categories Table
    CREATE TABLE IF NOT EXISTS price_categories (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      category_code TEXT UNIQUE NOT NULL,
      category_name TEXT NOT NULL,
      sort_order INTEGER DEFAULT 0
    );

    -- Estimate Line Items (detailed cost breakdown)
    CREATE TABLE IF NOT EXISTS estimate_line_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      estimate_id INTEGER NOT NULL,
      line_code TEXT NOT NULL,
      description TEXT NOT NULL,
      quantity REAL NOT NULL,
      unit_of_measure TEXT NOT NULL,
      labor_total REAL DEFAULT 0,
      material_total REAL DEFAULT 0,
      equipment_total REAL DEFAULT 0,
      overhead_percent REAL DEFAULT 0,
      profit_percent REAL DEFAULT 0,
      final_price REAL DEFAULT 0,
      FOREIGN KEY (estimate_id) REFERENCES estimates(id)
    );

    -- WORK ORDERS, ESTIMATES, CHANGE ORDERS, MATERIALS, EQUIPMENT, EMPLOYEES, VENDORS tables would also be here...
    -- (Assuming they were created in a previous artifact or will be created later)
    -- For now, we focus on the pricing mechanism.
  `);

  // Insert default settings if not exists
  const settingsExist = await db.get('SELECT * FROM settings LIMIT 1');
  if (!settingsExist) {
    await db.run(`
      INSERT INTO settings (company_name, company_address, company_phone, company_email, tax_rate, invoice_prefix, estimate_prefix) 
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [
      'SD-BCS',
      '123 Construction Way, San Diego, CA',
      '(619) 555-1212',
      'm19u3l@sd-bcs.com',
      0.0825, // 8.25% default tax
      'INV-',
      'EST-'
    ]);
  }

  console.log('✅ Database schema updated successfully');
  return db;
}

// Function to insert initial sample data
async function insertSampleData(database) {
  // Check if clients exist, if not, insert samples
  const clientsExist = await database.get('SELECT * FROM clients LIMIT 1');
  if (!clientsExist) {
    await database.run(`INSERT INTO clients (name, email, phone, address, city, state, zip) VALUES
      ('John Doe', 'john@example.com', '(555) 111-2222', '123 Main St', 'San Diego', 'CA', '92122'),
      ('Mary Johnson', 'mary.johnson@example.com', '(858) 555-0200', '456 Elm St', 'La Jolla', 'CA', '92037'),
      ('Acme HOA', 'hoa@acme.com', '(760) 555-0300', '789 Oak St', 'San Diego', 'CA', '92122')`);
  }

  // Check if price list items exist, if not, insert samples
  const priceListExist = await database.get('SELECT * FROM price_list LIMIT 1');
  if (!priceListExist) {
    await database.run(`INSERT INTO price_list (line_code, description, category, unit_of_measure, labor_cost, material_cost, equipment_cost, unit_price) VALUES
      ('WTR DRY', 'Water Extraction (Small Area)', 'Water Remediation', 'EA', 150.00, 0, 50.00, 200.00),
      ('DRYWLL REM', 'Drywall, remove and dispose', 'DEMO', 'SF', 0.50, 0.10, 0.05, 0.65),
      ('WALL FRAM', 'Wall framing, 2x4 studs', 'FRM', 'LF', 8.00, 4.00, 0.50, 12.50),
      ('CAB BASE', 'Cabinetry, set base cabinet', 'CAB', 'EA', 120.00, 0, 10.00, 130.00),
      ('PAINT 2C1T', 'Paint walls and ceiling, 2 coats', 'PNT', 'SF', 0.85, 0.45, 0.02, 1.32)`);
  }
  
  console.log('✅ Sample data inserted (Clients and Price List)');
}


// Initialize database
export const dbPromise = initDatabase().then(db => {
    // Insert sample data after tables are created
    insertSampleData(db).catch(err => console.error("Error inserting sample data:", err));
    return db;
});

// Export helper functions
export default {
  get: async (sql, params) => {
    const database = await dbPromise;
    return database.get(sql, params);
  },
  all: async (sql, params) => {
    const database = await dbPromise;
    return database.all(sql, params);
  },
  run: async (sql, params) => {
    const database = await dbPromise;
    return database.run(sql, params);
  },
  // Ensure the dbPromise is also exported if needed by other modules
  dbPromise, 
};

// Log successful initialization 
dbPromise.then(() => console.log('Database export ready'));
