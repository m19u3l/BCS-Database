‚úÖ STEP-BY-STEP SETUP GUIDE
üöÄ Complete Assembly Instructions
Follow these steps IN ORDER to get your insurance restoration system working:

STEP 1: Update Your Database File (db.js)
Location: Root directory (same level as server.js)
Action: Open your existing db.js file and ADD the new tables to the initialization section.
Find this part in your db.js:
javascriptawait db.exec(`
  -- Create tables
  CREATE TABLE IF NOT EXISTS clients (
    ...
  );
  
  // ADD THE NEW TABLES HERE (before the closing backtick)
Copy and paste this BEFORE the closing backtick );:
sql-- ===================================
-- Moisture Readings Log
-- ===================================
CREATE TABLE IF NOT EXISTS moisture_readings (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  dryout_id INTEGER NOT NULL,
  reading_date DATE NOT NULL,
  room TEXT,
  material_type TEXT,
  location_description TEXT,
  moisture_percentage REAL,
  reading_number INTEGER,
  meter_type TEXT,
  target_moisture REAL,
  dry BOOLEAN DEFAULT FALSE,
  notes TEXT,
  technician TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (dryout_id) REFERENCES remediation_dryout(id)
);

-- ===================================
-- Daily Project Logs
-- ===================================
CREATE TABLE IF NOT EXISTS daily_project_logs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  project_id INTEGER NOT NULL,
  project_type TEXT,
  log_date DATE NOT NULL,
  technician_name TEXT,
  work_performed TEXT,
  equipment_checked TEXT,
  moisture_readings TEXT,
  crew_members TEXT,
  hours_worked REAL DEFAULT 0,
  weather_conditions TEXT,
  site_conditions TEXT,
  issues_encountered TEXT,
  next_visit_planned DATE,
  notes TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- ===================================
-- Equipment Usage Log
-- ===================================
CREATE TABLE IF NOT EXISTS equipment_usage_log (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  project_id INTEGER NOT NULL,
  project_type TEXT,
  equipment_type TEXT,
  equipment_model TEXT,
  serial_number TEXT,
  quantity INTEGER DEFAULT 1,
  date_deployed DATE,
  date_retrieved DATE,
  days_used INTEGER,
  rental_rate_per_day REAL DEFAULT 0,
  total_rental_cost REAL DEFAULT 0,
  location TEXT,
  readings_log TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- ===================================
-- Project Photos
-- ===================================
CREATE TABLE IF NOT EXISTS project_photos (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  project_id INTEGER NOT NULL,
  project_type TEXT,
  photo_type TEXT,
  room_location TEXT,
  description TEXT,
  file_path TEXT,
  thumbnail_path TEXT,
  taken_date DATETIME,
  taken_by TEXT,
  metadata TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- ===================================
-- Enhanced Remediation Dryout
-- ===================================
CREATE TABLE IF NOT EXISTS remediation_dryout (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  work_order_id INTEGER NOT NULL,
  project_number TEXT,
  loss_date DATE,
  loss_type TEXT,
  loss_category TEXT,
  affected_areas TEXT,
  date_notified DATE,
  date_inspection DATE,
  inspector_name TEXT,
  moisture_map TEXT,
  initial_moisture_readings TEXT,
  equipment_list TEXT,
  air_movers_qty INTEGER DEFAULT 0,
  dehumidifiers_qty INTEGER DEFAULT 0,
  carpet_removed_sqft REAL DEFAULT 0,
  pad_removed_sqft REAL DEFAULT 0,
  baseboard_removed_lf REAL DEFAULT 0,
  drywall_removed_sqft REAL DEFAULT 0,
  drywall_cut_height TEXT,
  insulation_removed_sqft REAL DEFAULT 0,
  ceiling_removed_sqft REAL DEFAULT 0,
  cabinets_removed_qty INTEGER DEFAULT 0,
  antimicrobial_applied BOOLEAN DEFAULT FALSE,
  antimicrobial_product TEXT,
  deodorization_required BOOLEAN DEFAULT FALSE,
  deodorization_method TEXT,
  insurance_carrier TEXT,
  claim_number TEXT,
  adjuster_name TEXT,
  policy_number TEXT,
  estimated_cost REAL DEFAULT 0,
  labor_hours REAL DEFAULT 0,
  status TEXT DEFAULT 'Active',
  date_started DATE,
  date_completed DATE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (work_order_id) REFERENCES work_orders(id)
);

-- ===================================
-- Enhanced Remediation Reconstruction  
-- ===================================
CREATE TABLE IF NOT EXISTS remediation_reconstruction (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  dryout_id INTEGER,
  work_order_id INTEGER NOT NULL,
  project_number TEXT,
  project_name TEXT,
  reconstruction_type TEXT,
  
  -- Demolition
  carpet_demo_sqft REAL DEFAULT 0,
  carpet_demo_rate REAL DEFAULT 0,
  pad_demo_sqft REAL DEFAULT 0,
  tile_demo_sqft REAL DEFAULT 0,
  hardwood_demo_sqft REAL DEFAULT 0,
  drywall_demo_sqft REAL DEFAULT 0,
  drywall_demo_rate REAL DEFAULT 0,
  baseboard_demo_lf REAL DEFAULT 0,
  
  -- Framing
  wall_framing_lf REAL DEFAULT 0,
  wall_framing_rate REAL DEFAULT 0,
  
  -- Plumbing
  toilet_install_qty INTEGER DEFAULT 0,
  toilet_cost_ea REAL DEFAULT 0,
  sink_install_qty INTEGER DEFAULT 0,
  sink_cost_ea REAL DEFAULT 0,
  
  -- Electrical
  outlets_installed_qty INTEGER DEFAULT 0,
  switches_installed_qty INTEGER DEFAULT 0,
  
  -- Insulation
  batt_insulation_install_sqft REAL DEFAULT 0,
  batt_insulation_rate REAL DEFAULT 0,
  
  -- Drywall
  drywall_hang_sqft REAL DEFAULT 0,
  drywall_hang_rate REAL DEFAULT 0,
  drywall_finish_sqft REAL DEFAULT 0,
  drywall_finish_rate REAL DEFAULT 0,
  drywall_texture_sqft REAL DEFAULT 0,
  drywall_texture_type TEXT,
  
  -- Painting
  primer_walls_sqft REAL DEFAULT 0,
  primer_rate REAL DEFAULT 0,
  paint_walls_sqft REAL DEFAULT 0,
  paint_walls_rate REAL DEFAULT 0,
  paint_walls_coats INTEGER DEFAULT 2,
  paint_ceiling_sqft REAL DEFAULT 0,
  paint_color_scheme TEXT,
  
  -- Trim
  baseboard_install_lf REAL DEFAULT 0,
  baseboard_type TEXT,
  baseboard_rate REAL DEFAULT 0,
  crown_molding_install_lf REAL DEFAULT 0,
  
  -- Doors
  interior_door_install_qty INTEGER DEFAULT 0,
  interior_door_type TEXT,
  interior_door_cost_ea REAL DEFAULT 0,
  
  -- Flooring
  carpet_install_sqft REAL DEFAULT 0,
  carpet_type TEXT,
  carpet_rate REAL DEFAULT 0,
  pad_install_sqft REAL DEFAULT 0,
  tile_install_sqft REAL DEFAULT 0,
  tile_type TEXT,
  tile_rate REAL DEFAULT 0,
  hardwood_install_sqft REAL DEFAULT 0,
  hardwood_type TEXT,
  hardwood_rate REAL DEFAULT 0,
  vinyl_install_sqft REAL DEFAULT 0,
  vinyl_type TEXT,
  vinyl_rate REAL DEFAULT 0,
  
  -- Cabinetry
  base_cabinets_install_lf REAL DEFAULT 0,
  base_cabinet_cost_lf REAL DEFAULT 0,
  countertop_install_lf REAL DEFAULT 0,
  countertop_material TEXT,
  countertop_cost_lf REAL DEFAULT 0,
  
  -- Labor tracking
  general_contractor_hours REAL DEFAULT 0,
  carpenter_hours REAL DEFAULT 0,
  electrician_hours REAL DEFAULT 0,
  plumber_hours REAL DEFAULT 0,
  drywall_hanger_hours REAL DEFAULT 0,
  painter_hours REAL DEFAULT 0,
  
  -- Costs
  total_material_cost REAL DEFAULT 0,
  total_labor_cost REAL DEFAULT 0,
  overhead_percentage REAL DEFAULT 10,
  profit_margin_percentage REAL DEFAULT 10,
  estimated_total REAL DEFAULT 0,
  
  -- Insurance
  insurance_carrier TEXT,
  claim_number TEXT,
  adjuster_name TEXT,
  
  status TEXT DEFAULT 'Planning',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (work_order_id) REFERENCES work_orders(id)
);

STEP 2: Replace Your Route Files
A. Replace routes/remediation-dryout.js
Delete your current simple placeholder file and replace it with the complete version from the artifact: "routes/remediation-dryout.js - Complete"
B. Replace routes/remediation-reconstruction.js
Delete your current simple placeholder file and replace it with the complete version from the artifact: "routes/remediation-reconstruction.js - Complete"

STEP 3: Delete Old Database (Fresh Start)
bash# In your project directory
rm invoice.db
This forces the system to recreate the database with all the new tables.

STEP 4: Test the System
bash# Start your server
npm run dev
You should see:
‚úÖ Database initialized successfully
‚úÖ Sample data inserted
‚úÖ Server running on port 3000

STEP 5: Test the Insurance Features
Test Dryout Project Creation:
bashcurl -X POST http://localhost:3000/api/remediation/dryout \
  -H "Content-Type: application/json" \
  -d '{
    "work_order_id": 1,
    "loss_type": "Water",
    "loss_category": "Category 2",
    "insurance_carrier": "State Farm",
    "claim_number": "SF-123456"
  }'
Test Reconstruction Project:
bashcurl -X POST http://localhost:3000/api/remediation/reconstruction \
  -H "Content-Type: application/json" \
  -d '{
    "work_order_id": 1,
    "project_name": "Kitchen Water Damage Reconstruction",
    "reconstruction_type": "Water"
  }'

üìÅ Your Final File Structure
Venicwe-Bcs-ig/
‚îú‚îÄ‚îÄ server.js                              ‚úÖ Already exists
‚îú‚îÄ‚îÄ db.js                                  ‚ö†Ô∏è  UPDATE THIS
‚îú‚îÄ‚îÄ package.json                           ‚úÖ Already exists
‚îú‚îÄ‚îÄ .env                                   ‚ö†Ô∏è  CREATE THIS
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ clients.js                         ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ invoices.js                        ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ estimates.js                       ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ services.js                        ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ line_items.js                      ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ work-orders.js                     ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ change-orders.js                   ‚ö†Ô∏è  CREATE THIS
‚îÇ   ‚îú‚îÄ‚îÄ materials.js                       ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ equipment.js                       ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ remediation-dryout.js             ‚ö†Ô∏è  REPLACE THIS
‚îÇ   ‚îú‚îÄ‚îÄ remediation-reconstruction.js     ‚ö†Ô∏è  REPLACE THIS
‚îÇ   ‚îú‚îÄ‚îÄ dashboard.js                       ‚úÖ
‚îÇ   ‚îî‚îÄ‚îÄ ... (other routes)                 ‚úÖ
‚îî‚îÄ‚îÄ client/
    ‚îî‚îÄ‚îÄ index.html                         ‚ÑπÔ∏è  Optional

üéØ Quick Checklist

 Update db.js with new table definitions
 Replace remediation-dryout.js route file
 Replace remediation-reconstruction.js route file
 Create change-orders.js if missing
 Create .env file with credentials
 Delete old invoice.db file
 Run npm install (if needed)
 Start server with npm run dev
 Test API endpoints


üÜò If You Get Stuck
"Table already exists" error
bash# Delete database and restart
rm invoice.db
npm run dev
"Cannot find module" error
bash# Make sure all route files exist
ls -la routes/
# Install dependencies
npm install
"Database locked" error
bash# Close any database browsers
# Restart server

‚úÖ Success Indicators
When everything is working, you should be able to:

‚úÖ Create a dryout project
‚úÖ Add moisture readings
‚úÖ Log equipment deployment
‚úÖ Add daily logs
‚úÖ Create reconstruction project
‚úÖ Generate Xactimate estimates
‚úÖ Upload photos
‚úÖ Track all trades and materials


üìû What You Have Now
A professional insurance restoration system with:

Complete water damage documentation
IICRC-compliant moisture tracking
Xactimate-compatible estimates
Every trade documented in detail
Daily logs for insurance
Photo documentation
Equipment rental tracking
Labor hour tracking by trade
Material quantity tracking
Permit and inspection logs

You're ready to compete with ServPro! üöÄ

üí° Next Steps After Setup

Customize your rates - Update material and labor costs
Add your equipment - List your dehumidifiers, air movers, etc.
Create templates - Build standard scopes for common jobs
Train your team - Show them how to log moisture readings
Take photos - Document everything for insurance

Need the actual file contents? All the code is in the artifacts I created:

db.js enhancement (the SQL tables above)
routes/remediation-dryout.js - Complete
routes/remediation-reconstruction.js - Complete
Insurance Restoration Guide

